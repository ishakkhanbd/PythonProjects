{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOlQotv2u2roEWhLa/3CDWG"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"4o7Z4tLP_VF5"},"outputs":[],"source":["class MoneyMachine:\n","\n","    CURRENCY = \"$\"\n","\n","    COIN_VALUES = {\n","        \"quarters\": 0.25,\n","        \"dimes\": 0.10,\n","        \"nickles\": 0.05,\n","        \"pennies\": 0.01\n","    }\n","\n","    def __init__(self):\n","        self.profit = 0\n","        self.money_received = 0\n","\n","    def report(self):\n","        \"\"\"Prints the current profit\"\"\"\n","        print(f\"Money: {self.CURRENCY}{self.profit}\")\n","\n","    def process_coins(self):\n","        \"\"\"Returns the total calculated from coins inserted.\"\"\"\n","        print(\"Please insert coins.\")\n","        for coin in self.COIN_VALUES:\n","            self.money_received += int(input(f\"How many {coin}?: \")) * self.COIN_VALUES[coin]\n","        return self.money_received\n","\n","    def make_payment(self, cost):\n","        \"\"\"Returns True when payment is accepted, or False if insufficient.\"\"\"\n","        self.process_coins()\n","        if self.money_received >= cost:\n","            change = round(self.money_received - cost, 2)\n","            print(f\"Here is {self.CURRENCY}{change} in change.\")\n","            self.profit += cost\n","            self.money_received = 0\n","            return True\n","        else:\n","            print(\"Sorry that's not enough money. Money refunded.\")\n","            self.money_received = 0\n","            return False"]}]}